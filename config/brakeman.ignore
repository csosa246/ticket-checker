{
  "ignored_warnings": [
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "0213debb7056f5d86f37f2ae6749fc5d73b8849047347c2eb551b6e4058fd524",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/models/query/orders.rb",
      "line": 64,
      "link": "https://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "relation.joins(\"INNER JOIN (#{order_by_subselect}) AS ordered_orders ON orders.id = ordered_orders.id\")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "Query::Orders",
        "method": "order_scope"
      },
      "user_input": "order_by_subselect",
      "confidence": "Weak",
      "note": "This is not a possible SQL injection because it does not contain a user-provided value; we are interpolating our own static SQL."
    },
    {
      "warning_type": "Cross-Site Request Forgery",
      "warning_code": 86,
      "fingerprint": "4d109bd02e4ccb3ea4c51485c947be435ee006a61af7d2cd37d1b358c7469189",
      "check_name": "ForgerySetting",
      "message": "protect_from_forgery should be configured with 'with: :exception'",
      "file": "app/controllers/application_controller.rb",
      "line": null,
      "link": "https://brakemanscanner.org/docs/warning_types/cross-site_request_forgery/",
      "code": null,
      "render_path": null,
      "location": {
        "type": "controller",
        "controller": "ApplicationController"
      },
      "user_input": null,
      "confidence": "Medium",
      "note": "We do not require a Rails authenticity token for JSON requests; we should allow nullifying the session."
    }
  ],
  "updated": "2018-03-22 14:59:02 -0400",
  "brakeman_version": "4.2.0"
}
